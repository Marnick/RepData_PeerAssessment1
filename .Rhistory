# set local language to English so weekdays are in English
Sys.setlocale("LC_TIME", "English")
# plot the Global active power to the png file
plot(data$DateTime, data$Sub_metering_1, type="l", main="", xlab="",
ylab="Energy sub metering")
lines(data$DateTime, data$Sub_metering_2, type="l", col="red")
lines(data$DateTime, data$Sub_metering_3, type="l", col="blue")
# close the png file
dev.off()
?legend
legend("topright", c("Sub_metering1","Sub_metering2","Sub_metering3"))
ot(data$DateTime, data$Sub_metering_1, type="l", main="", xlab="",
ylab="Energy sub metering")
lines(data$DateTime, data$Sub_metering_2, type="l", col="red")
lines(data$DateTime, data$Sub_metering_3, type="l", col="blue")
plot(data$DateTime, data$Sub_metering_1, type="l", main="", xlab="",
ylab="Energy sub metering")
lines(data$DateTime, data$Sub_metering_2, type="l", col="red")
lines(data$DateTime, data$Sub_metering_3, type="l", col="blue")
legend("topright", c("Sub_metering1","Sub_metering2","Sub_metering3"))
legend("topright", col= c("black", "red","blue"),c("Sub_metering1","Sub_metering2","Sub_metering3"))
legend("topright", pch=1, col= c("black", "red","blue"),c("Sub_metering1","Sub_metering2","Sub_metering3"))
legend("topright", pch=2, col= c("black", "red","blue"),c("Sub_metering1","Sub_metering2","Sub_metering3"))
legend("topright", pch=2, lty=1, lwd=1, col= c("black", "red","blue"),
c("Sub_metering1","Sub_metering2","Sub_metering3"))
legend("topright", lty=1, lwd=1, col= c("black", "red","blue"),
c("Sub_metering1","Sub_metering2","Sub_metering3"))
# Open png file
png(filename="./project1/plot3.png")
# set local language to English so weekdays are in English
Sys.setlocale("LC_TIME", "English")
# plot the Global active power to the png file
plot(data$DateTime, data$Sub_metering_1, type="l", main="", xlab="",
ylab="Energy sub metering")
lines(data$DateTime, data$Sub_metering_2, type="l", col="red")
lines(data$DateTime, data$Sub_metering_3, type="l", col="blue")
legend("topright", lty=1, lwd=1, col= c("black", "red","blue"),
c("Sub_metering1","Sub_metering2","Sub_metering3"))
# close the png file
dev.off()
plot3 <- function() {
# function that plots submetering 1,2,3 the dates 1/2/2007 and 2/2/2007
# It saves the plotted data to file plot3.png
# The data is provided by the UC Irvine Machine Learning Repository
# In particular,  the "Individual household electricpower consumption
# Data Set"
# Define the classes of the columns and read the datafile
colclass <-c("character","character",rep("numeric",7))
data <- read.table("./project1/household_power_consumption.txt",
header = TRUE, sep=";", colClasses=colclass, na.strings="?")
# subset the data for 1/2/2007 and 2/2/2007
data <- subset(data, Date=="1/2/2007"|Date=="2/2/2007")
# create a POSIXlt from the date and time column
data$DateTime <- strptime(paste(data$Date,data$Time),"%d/%m/%Y %H:%M:%S")
# Open png file
png(filename="./project1/plot3.png")
# set local language to English so weekdays are in English
Sys.setlocale("LC_TIME", "English")
# plot the Global active power to the png file
plot(data$DateTime, data$Sub_metering_1, type="l", main="", xlab="",
ylab="Energy sub metering")
lines(data$DateTime, data$Sub_metering_2, type="l", col="red")
lines(data$DateTime, data$Sub_metering_3, type="l", col="blue")
legend("topright", lty=1, lwd=1, col= c("black", "red","blue"),
c("Sub_metering1","Sub_metering2","Sub_metering3"))
# close the png file
dev.off()
}
plot3()
par(mfrow=c(2,2)
)
hist(data$Global_active_power, col="red", n=12,
main="Global Active Power", xlab="Global Active Power (kilowatts)")
# Define the classes of the columns and read the datafile
colclass <-c("character","character",rep("numeric",7))
data <- read.table("./project1/household_power_consumption.txt",
header = TRUE, sep=";", colClasses=colclass, na.strings="?")
# subset the data for 1/2/2007 and 2/2/2007
data <- subset(data, Date=="1/2/2007"|Date=="2/2/2007")
# create a POSIXlt from the date and time column
data$DateTime <- strptime(paste(data$Date,data$Time),"%d/%m/%Y %H:%M:%S")
Sys.setlocale("LC_TIME", "English")
# set the parameters for 4 plots on one canvas
par(mfrow=c(2,2))
# plot the Global active power to the png file
plot(data$DateTime,data$Global_active_power, main="", xlab ="",
ylab="Global Active Power (kilowatts)")
?plot
plot(data$DateTime,data$Global_active_power, type="l", main="",
xlab ="", ylab="Global Active Power (kilowatts)")
plot(data$DateTime,data$Global_active_power, type="l", main="",
xlab ="", ylab="Global Active Power")
plot(data$DateTime,data$Voltage, type="l", main="",
xlab ="", ylab="Voltage")
?legend
?lty
?lines
plot(data$DateTime, data$Sub_metering_1, type="l", main="", xlab="",
ylab="Energy sub metering")
lines(data$DateTime, data$Sub_metering_2, type="l", col="red")
lines(data$DateTime, data$Sub_metering_3, type="l", col="blue")
legend("topright", lty=1, lwd=1, col= c("black", "red","blue"),
c("Sub_metering1","Sub_metering2","Sub_metering3"),
box.col="white")
# Open png file
png(filename="./project1/plot4.png")
# set local language to English so weekdays are in English
Sys.setlocale("LC_TIME", "English")
# set the parameters for 4 plots on one canvas
par(mfrow=c(2,2))
# plot the Global active power
plot(data$DateTime,data$Global_active_power, main="", xlab ="",
ylab="Global Active Power")
# plot Voltage
plot(data$DateTime,data$Voltage, type="l", main="",
xlab ="", ylab="Voltage")
# plot submetering
plot(data$DateTime, data$Sub_metering_1, type="l", main="", xlab="",
ylab="Energy sub metering")
lines(data$DateTime, data$Sub_metering_2, type="l", col="red")
lines(data$DateTime, data$Sub_metering_3, type="l", col="blue")
legend("topright", lty=1, lwd=1, col= c("black", "red","blue"),
c("Sub_metering1","Sub_metering2","Sub_metering3"),
box.col="white")
# plot global reactive power
plot(data$DateTime,data$Global_reactive_power, main="", xlab ="",
ylab="")
# close the png file
dev.off()
?legend
png(filename="./project1/plot4.png")
# set local language to English so weekdays are in English
Sys.setlocale("LC_TIME", "English")
# set the parameters for 4 plots on one canvas
par(mfrow=c(2,2))
# plot the Global active power
plot(data$DateTime,data$Global_active_power, type="l", main="", xlab ="",
ylab="Global Active Power")
# plot Voltage
plot(data$DateTime,data$Voltage, type="l", main="",
xlab ="", ylab="Voltage")
# plot submetering
plot(data$DateTime, data$Sub_metering_1, type="l", main="", xlab="",
ylab="Energy sub metering")
lines(data$DateTime, data$Sub_metering_2, type="l", col="red")
lines(data$DateTime, data$Sub_metering_3, type="l", col="blue")
legend("topright", lty=1, lwd=1, col= c("black", "red","blue"),
c("Sub_metering1","Sub_metering2","Sub_metering3"), bty="n")
# plot global reactive power
plot(data$DateTime,data$Global_reactive_power, type ="l", main="", xlab ="",
ylab="")
# close the png file
dev.off()
# Open png file
png(filename="./project1/plot4.png")
# set local language to English so weekdays are in English
Sys.setlocale("LC_TIME", "English")
# set the parameters for 4 plots on one canvas
par(mfrow=c(2,2))
# plot the Global active power
plot(data$DateTime,data$Global_active_power, type="l", main="", xlab ="",
ylab="Global Active Power")
# plot Voltage
plot(data$DateTime,data$Voltage, type="l", main="",
xlab ="datetime", ylab="Voltage")
# plot submetering
plot(data$DateTime, data$Sub_metering_1, type="l", main="", xlab="",
ylab="Energy sub metering")
lines(data$DateTime, data$Sub_metering_2, type="l", col="red")
lines(data$DateTime, data$Sub_metering_3, type="l", col="blue")
legend("topright", lty=1, lwd=1, col= c("black", "red","blue"),
c("Sub_metering1","Sub_metering2","Sub_metering3"), bty="n")
# plot global reactive power
plot(data$DateTime,data$Global_reactive_power, type ="l", main="",
xlab ="datetime")
# close the png file
dev.off()
png(filename="./project1/plot4.png")
# set local language to English so weekdays are in English
Sys.setlocale("LC_TIME", "English")
# set the parameters for 4 plots on one canvas
par(mfrow=c(2,2))
# plot the Global active power
plot(data$DateTime,data$Global_active_power, type="l", main="", xlab ="",
ylab="Global Active Power")
# plot Voltage
plot(data$DateTime,data$Voltage, type="l", main="",
xlab ="datetime", ylab="Voltage")
# plot submetering
plot(data$DateTime, data$Sub_metering_1, type="l", main="", xlab="",
ylab="Energy sub metering")
lines(data$DateTime, data$Sub_metering_2, type="l", col="red")
lines(data$DateTime, data$Sub_metering_3, type="l", col="blue")
legend("topright", lty=1, lwd=1, col= c("black", "red","blue"),
c("Sub_metering1","Sub_metering2","Sub_metering3"), bty="n")
# plot global reactive power
with(date, plot(DateTime,Global_reactive_power, type ="l", main="",
xlab ="datetime")
# close the png file
dev.off()
dev.off()
png(filename="./project1/plot4.png")
# set local language to English so weekdays are in English
Sys.setlocale("LC_TIME", "English")
# set the parameters for 4 plots on one canvas
par(mfrow=c(2,2))
# plot the Global active power
plot(data$DateTime,data$Global_active_power, type="l", main="", xlab ="",
ylab="Global Active Power")
# plot Voltage
plot(data$DateTime,data$Voltage, type="l", main="",
xlab ="datetime", ylab="Voltage")
# plot submetering
plot(data$DateTime, data$Sub_metering_1, type="l", main="", xlab="",
ylab="Energy sub metering")
lines(data$DateTime, data$Sub_metering_2, type="l", col="red")
lines(data$DateTime, data$Sub_metering_3, type="l", col="blue")
legend("topright", lty=1, lwd=1, col= c("black", "red","blue"),
c("Sub_metering1","Sub_metering2","Sub_metering3"), bty="n")
# plot global reactive power
with(date, plot(DateTime,Global_reactive_power, type ="l", main="",
xlab ="datetime"))
# close the png file
dev.off()
dev.off()
png(filename="./project1/plot4.png")
# set local language to English so weekdays are in English
Sys.setlocale("LC_TIME", "English")
# set the parameters for 4 plots on one canvas
par(mfrow=c(2,2))
# plot the Global active power
plot(data$DateTime,data$Global_active_power, type="l", main="", xlab ="",
ylab="Global Active Power")
# plot Voltage
plot(data$DateTime,data$Voltage, type="l", main="",
xlab ="datetime", ylab="Voltage")
# plot submetering
plot(data$DateTime, data$Sub_metering_1, type="l", main="", xlab="",
ylab="Energy sub metering")
lines(data$DateTime, data$Sub_metering_2, type="l", col="red")
lines(data$DateTime, data$Sub_metering_3, type="l", col="blue")
legend("topright", lty=1, lwd=1, col= c("black", "red","blue"),
c("Sub_metering1","Sub_metering2","Sub_metering3"), bty="n")
# plot global reactive power
with(data, plot(DateTime,Global_reactive_power, type ="l", main="",
xlab ="datetime"))
# close the png file
dev.off()
png(filename="./project1/plot4.png")
# set local language to English so weekdays are in English
Sys.setlocale("LC_TIME", "English")
# set the parameters for 4 plots on one canvas
par(mfrow=c(2,2))
# plot the Global active power
plot(data$DateTime,data$Global_active_power, type="l", main="", xlab ="",
ylab="Global Active Power")
# plot Voltage
plot(data$DateTime,data$Voltage, type="l", main="",
xlab ="datetime", ylab="Voltage")
# plot submetering
plot(data$DateTime, data$Sub_metering_1, type="l", main="", xlab="",
ylab="Energy sub metering")
lines(data$DateTime, data$Sub_metering_2, type="l", col="red")
lines(data$DateTime, data$Sub_metering_3, type="l", col="blue")
legend("topright", lty=1, lwd=1, col= c("black", "red","blue"),
c("Sub_metering_1","Sub_metering_2","Sub_metering_3"), bty="n")
# plot global reactive power
with(data, plot(DateTime,Global_reactive_power, type ="l", main="",
xlab ="datetime"))
# close the png file
dev.off()
# Open png file
png(filename="./project1/plot3.png")
# set local language to English so weekdays are in English
Sys.setlocale("LC_TIME", "English")
# plot the submetering data to the png file
plot(data$DateTime, data$Sub_metering_1, type="l", main="", xlab="",
ylab="Energy sub metering")
lines(data$DateTime, data$Sub_metering_2, type="l", col="red")
lines(data$DateTime, data$Sub_metering_3, type="l", col="blue")
legend("topright", lty=1, lwd=1, col= c("black", "red","blue"),
c("Sub_metering_1","Sub_metering_2","Sub_metering_3"))
# close the png file
dev.off()
install.packages("kernlab")
library(kernlab)
data(spam)
head(spam)
str(spam)
set.seed(3435)
trainIndicator <- rbinom(4601, size =1, prob=0.5)
table(trainIndicator)
trainSpam = spam[trainIndicator==1,]
testSpam = spam[trainIndicator==0,]
names(spam)
table(spam$type)
table(trainSpam$type)
table(testSpam$type)
plot(log10(trainSpam[,1:4])+1)
trainSpam[,1:4]
plot(log10(trainSpam[,1:4]+1))
hCluster = hclust(dist(t(trainSpam[1:57,])))
hCluster = hclust(dist(t(trainSpam[,1:57])))
plot(hCluster)
?hclust
hClusterUpdated=hcluster(dist(t(log10(train[,1:55]+1))))
hClusterUpdated=hclust(dist(t(log10(train[,1:55]+1))))
hClusterUpdated=hclust(dist(t(log10(trainSpam[,1:55]+1))))
plot(hClusterUpdated)
trainSpam$numType=as.numeric(trainSpam$type)-1
?reformulate
reformulate("x*w", ff[[2]])
ff <-y~z+x+w
reformulate("x*w", ff[[2]])
ff
costFunction=function(x,y) sum(x != (y>0.5))
cvError=rep(NA,55)
library(boot)
for (i in 1:55){
lmFormula = reformulate(names(trainSpam)[i], response="numType")
lmFormula
}
lmFormula
?glm
glmFit = glm(lmFormula, family="binominal", data = trainSpam)
glmFit = glm(lmFormula, family="binomial", data = trainSpam)
glmFit
?cv.glm
}
for (i in 1:55){
lmFormula = reformulate(names(trainSpam)[i], response="numType")
glmFit = glm(lmFormula, family="binomial", data = trainSpam)
cvError[i] = cv.glm(trainSpam, glmFit, costFunction, 2)$delta[2]
}
names(trainSpam)[which.min((cvError)]
names(trainSpam)[which.min(cvError)]
?glm
predictionModel = glm(numType~charDollar, family="binomial", data=trainSpam)
?predict
prediction = predict(predictionModel,testSpam)
predictedSpam=rep("non")
predictedSpam=rep("nonspam",dim(testSpam)[1])
?dim
predictedSpam[predictionModel$fitted > 0.5]="spam"
predictionModel
table(prediction)
head(prediction)
table(predictedSpam)
table(predictedSpam,testSpam$type)
table(predictedSpam,testSpam$type)[1,1]
install.packages("proc")
library(proc)
library(pRoc)
library(pROC)
install.packages(pROC)
install.packages("pROC")
install.packages(pROC)
library(pROC)
?ROC
rocmodel = roc(numtType~charDollar,testSpam)
rocmodel = roc(numType~charDollar,testSpam)
names(testSpam)
rocmodel = roc(numType~charDollar,trainSpam)
plot(rocmodel)
rocmodel = roc(numType~your,trainSpam)
plot(rocmodel)
rocmodel = roc(numType~data,trainSpam)
plot(rocmodel)
rocmodel = roc(numType~prediction,trainSpam)
testSpam$prediction=prediction
rocmodel = roc(Type~prediction,testSpam)
rocmodel = roc(type~prediction,testSpam)
plot(rocmodel)
prediction
?prediction
?predict
hist(prediction,)
hist(prediction,n=50)
View(testSpam)
install.packages("caret")
plot(density(spam$your[spam$type=="nonspam"]),col="blue")
plot(density(spam$your[spam$type=="nonspam"]),col="blue",main="",xlab="frequency of 'your'")
lines(density(spam$your[spam$type=="spam"]),col="red")
plot(density(spam$your[spam$type=="charDollar"]),col="blue",main="",xlab="frequency of 'your'")
plot(density(spam$charDollar[spam$type=="nonspam"]),col="blue",main="",xlab="frequency of '$'")
lines(density(spam$charDollar[spam$type=="spam"]),col="red")
plot(density(spam$your[spam$type=="nonspam"]),col="blue",main="",xlab="frequency of 'your'")
lines(density(spam$your[spam$type=="spam"]),col="red")
abline(v=0.5,col="black")
prediction <- ifelse(spam$your >0.5,"spam,"nonspam)
prediction <- ifelse(spam$your >0.5,"spam,"nonspam)
prediction <- ifelse(spam$your >0.5,"spam","nonspam")
table(predection,spam$type)/lenght(spma)
table(predection,spam$type)/lenght(spam$type)
table(prediction,spam$type)/lenght(spam$type)
table(prediction,spam$type)/length(spam$type)
maacs
library(ggplot2)
?ggplot
testdata <- data.frame(x=1:100,y=rnorm(100))
testdata[50,2] <- 100
plot(testdata$x,testdata$y, type="l")
plot(testdata$x,testdata$y, type="l",ylim=c(-3,3))
g<-ggplot(testdata,aes(x=x,y=y))
g+geom_line()
g+geom_line()+ylim(-3,3)
g+geom_line()+coord_cartesian(ylim=c(-3,3))
g+geom_line()+coord_cartesian(ylim=c(-3,3))+theme_bw()
library(lattice)
xyplot(testdata$x,testdata$y)
xyplot(testdata)
?xyplot
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight, panel = function (x,y,...){})
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight, panel = function (x,y,...){panel.xyplot(x,y,...)
})
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight, panel = function (x,y,...){panel.xyplot(x,y,...)
panel.lmline(x,y,lty=2)
})
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
str(p)
p
?par
?trellis.par.set
?print.trellis
?slom
?splom
str(airquality)
qplot(Ozone, Wind, data=airquality)
?qplot
qplot(Ozone, Wind, data=airquality, facets=Month)
qplot(Ozone, Wind, data=airquality, facets=airquality$Month)
qplot(Ozone, Wind, data=airquality, color=Month)
airquality$Month=factor(airquality$Month)
qplot(Ozone, Wind, data=airquality, color=Month)
qplot(Ozone, Wind, data=airquality, facets=Month)
qplot(Ozone, Wind, data=airquality, facets=.~Month)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies, smooth = "loess")
?qplot
qplot(votes, rating, data = movies, geom=c("point", "smooth")
)
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies) + geom_smooth()
setwd("~/Marnick/Coursera_DataScience/Reproducible Research")
data <-read.csv("activity.csv")
View(data)
str(data)
?read.csv
data <-read.csv("activity.csv", colClasses =c("integer", "character", "integer"))
str(data)
data <-read.csv("activity.csv", colClasses =c("integer", "character", "character"))
str(data)
setwd("~/Marnick/Coursera_DataScience/Reproducible Research/RepData_PeerAssessment1")
View(data)
?strptime
paste(data$date[1], data$time[1])
paste(data$date[1], data$interval[1])
str(data)
?sprintf
intToHHMM <- function (i) {  sprintf("%02d:%02d", i %/% 100, i %% 100)}
intToHHMM(data$interval[1])
data <-read.csv("activity.csv", colClasses =c("integer", "character", "interger"))
data <-read.csv("activity.csv", colClasses =c("integer", "character", "integer"))
data <-read.csv("activity.csv", colClasses =c("integer", "character", "integer"))
colclas <- c("integer", "character", "integer")
activity <-read.csv("activity.csv", colClasses=colclas)
View(activity)
intToHHMM(activity$interval[1])
intToHHMM(activity$interval[100])
intToHHMM(activity$interval[1000])
intToHHMM <- function (i) {  sprintf("%02d:%02d", i %/% 100, i %% 100)}
activity$interval <-intToHHMM(activity$interval)
str(activity)
?strptime
paste(activity$date, activity$interval)
paste(activity$date[1], activity$interval[1])
strptime(paste(activity$date[1], activity$interval[1]), "%Y-%m-%d %H:%M")
strptime(paste(activity$date[2], activity$interval[2]), "%Y-%m-%d %H:%M")
?with)
?with
with(activity, datetime <-strptime(paste(date, interval[2]), "%Y-%m-%d %H:%M")
)
View(activity)
with(activity, date <-strptime(paste(date, interval[2]), "%Y-%m-%d %H:%M"))
View(activity)
str(activity)
with(activity, date <-strptime(paste(date, interval), "%Y-%m-%d %H:%M"))
View(activity)
activity$datetime <- paste(activity$date, activity$interval)
View(activity)
activity$datetime <- strptime(activity$datetime, "%Y-%m-%d %H:%M
")"
activity$datetime <- strptime(activity$datetime, "%Y-%m-%d %H:%M")
View(activity)
str(activity)
